pipeline{
    agent any
    environment{
        VENV_DIR = ".venv"
        PYTHON = "python3"
        ECR_DIR = "./Terraform/ecr"
        ECS_RDS_DIR = "./Terraform/ecs-rds"
        registryCredential = 'ecr:us-east-2:awscreds'  
        AWS_REGION = "us-east-2"
        REPOSITORY_NAME = "devops-project"
        IMAGE_TAG = "latest"
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        SONAR_PROJECT_KEY = "devops-project"
    }
    stages{
        stage('Fetch code'){
            steps{
                git branch: 'main', url: 'https://github.com/michaelcriss09/devops-project-fullstack-webapp.git'
            }
        }

        stage('Preparing AWS env'){
            steps{
                script{
                    env.AWS_ACCOUNT_ID = sh(
                        script: "aws sts get-caller-identity --query Account --output text",
                        returnStdout: true 
                    ).trim()

                    env.appRegistry = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.REPOSITORY_NAME}"
                    env.devopsRegistry = "https://${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com"
                }
            }
        }

        stage('Lint'){
            steps{
                sh '''
                  python3 -m venv venv
                  . venv/bin/activate
                  pip install pylint
                  pylint main.py db.py || true
                  pylint --output-format=json main.py db.py > pylint-report.json || true
                '''
            }
        }

        stage('SonarQube analisys code'){
            environment{
                scannerHome = tool 'sonar6.2'
                SONAR_PROJECT_KEY = 'devops-project'
            }
            steps{
                withSonarQubeEnv('sonarserver'){
                    sh'''
                    ${scannerHome}/bin/sonar-scanner \
                      -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                      -Dsonar.prorjectVersion=1.0 \
                      -Dsonar.sources=. \
                      -Dsonar.language=py \
                    '''
                }
            }
        }

        stage("Quality Gate"){
            steps {
                timeout(time: 1, unit: 'HOURS'){
                    waitForQualityGate abortPipeline:true
                }
            }
        }

        stage('Build Image'){
            steps{
                script{
                    dockerImage = docker.build(appRegistry + ":$BUILD_NUMBER", ".")
                }
            }
        }

        stage('Deploy ECR repository'){
            steps{
                dir("$env.ECR_DIR"){
                    sh '''
                    terraform init
                    terraform plan -out=myplan
                    terraform apply -auto-approve myplan
                    '''
                }
            }
        }
        stage('Upload Image to ECR'){
            steps{
                script{
                    docker.withRegistry(devopsRegistry, registryCredential){
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push("${env.IMAGE_TAG}")
                    }
                }
            }
        }

        stage('Deploy ECS and RDS'){
            steps{
                dir("$env.ECS_RDS_DIR"){
                    sh """
                    terraform init
                    terraform plan -out=myplan
                    terraform apply -auto-approve myplan
                    """
                }
            }
        }

        stage('Terraform destroy') {
            steps {
                input "Want to remove terraform provisioning infraestructure?"
                dir("${env.ECS_RDS_DIR}") {
                    sh 'terraform destroy -auto-approve'
                }

                dir("${env.ECR_DIR}"){
                    sh 'terraform destroy -auto-approve'
                }
            }
        }   
    }
    post{
        failure{

            // For testing purposes

            echo "Build failed. Destroying infraestructure..."
            dir("${env.ECS_RDS_DIR}"){
                sh 'terraform destroy -auto-approve'
            }
            dir("${env.ECR_DIR}"){
                sh 'terraform destroy -auto-approve'
            }
        }
    }
}